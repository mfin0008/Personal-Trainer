package database;

import java.io.FileNotFoundException;
import java.sql.*;
import java.sql.Connection;
import java.sql.DriverManager;
import org.apache.ibatis.jdbc.ScriptRunner;

/**
 * Class used to facilitate a connection between the code and the database.
 * Handles the execution of all query and update commands.
 */
public class DBConnection {
    /**
     * The url used to connect to the MySQL database.
     */
    private final static String url = "jdbc:mysql://localhost:3306/";
    /**
     * The username used for the MySQL database connection. By default, this will be root.
     */
    private final static String username = "root";

    /**
     * The password used for the MySQL database connection. This will need to be changed for the application to run.
     */
    private final static String password = "FIT3170.balance";
    /**
     * Class attribute used to hold the database's connection.
     */
    private static Connection connection;

    /**
     * Used by processQuery() and processUpdate() to generate the connection they use, if it hasn't already been generated.
     */
    private static void makeConnection() {

        try {
            // try to make a connection to the database
            Class.forName("com.mysql.cj.jdbc.Driver");
            connection = DriverManager.getConnection(url+"personal_trainer", username, password);
        }
        catch (SQLSyntaxErrorException e) {
            // if the database has not been created, create it, then try to make the connection again
            System.out.println(e);
            createDatabase();
        }
        catch (Exception e) {
            System.out.println(e);
        }
    }

    /**
     * Was originally intended to be called by makeConnection() if the database was not found.
     * This method would create the database before calling makeConnection() again.
     * This doesn't work though, seems like ScriptRunner is not able to handle the delimiter command, meaning the procedure and commands around it fail
     */
    private static void createDatabase() {

        try {
            // create the database
            Connection localHostConnection = DriverManager.getConnection(url, username, password);
            Statement statement = localHostConnection.createStatement();
            String creationSQL = "create database if not exists personal_trainer;";
            statement.execute(creationSQL);
            localHostConnection.close();

            // execute the schema creation file
            makeConnection();
            ScriptRunner scriptRunner = new ScriptRunner(connection);
            scriptRunner.runScript(new java.io.FileReader("src/databaseFiles/PT_schemaCreation.sql"));

        } catch (SQLException e) {
            throw new RuntimeException(e);
        } catch (FileNotFoundException e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * Called by Database files to return results from the database for an inputted query.
     * @param query: the SQL query to be run
     * @return the ResultSet generated by running the query
     */
    public static ResultSet processQuery(String query) {

        ResultSet result = null;
        try {
            if (connection == null) {
                makeConnection();
            }
            assert connection != null;
            // execute the query
            Statement statement = connection.createStatement();
            result = statement.executeQuery(query);
        }
        catch (Exception e) {
            System.out.println(e);
        }
        return result;
    }

    /**
     * Called by the Database files to process an inputted update statement
     * @param update: the SQL update to be run
     */
    public static void processUpdate(String update) {
        try {
            if (connection == null) {
                makeConnection();
            }
            assert connection != null;
            // execute the update
            Statement statement = connection.createStatement();
            statement.executeUpdate(update);
        }
        catch (Exception e) {
            System.out.println(e);
        }
    }

}
